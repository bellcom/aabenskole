<?php

/**
 * The plugin that handles a panel_pane - override/extend of default panel_pane plugin
 */
class apachesolr_channels_plugin_display_panel_pane extends views_content_plugin_display_panel_pane {
  function init(&$view, &$display, $options = NULL) {
    parent::init($view, $display, $options);
    if (!empty($_POST['is_local_context'])) {
      // pass araund this override value to use in ajax requests
      $this->set_option('is_local_context', TRUE);
      unset($_POST['is_local_context']);
    }
  }

  function option_definition() {
    $options = parent::option_definition();
    $options['allow']['contains']['local_context']['default'] = FALSE;
    $options['local_context'] = array('default' => 0);
    return $options;
  }

  function options_form(&$form, &$form_state) {
    parent::options_form($form, $form_state);
    switch ($form_state['section']) {
      case 'allow':
        $form['allow']['#options']['local_context'] = t('Link to content in local context');
        break;
      case 'local_context':
        $form['#title'] .= t('Link to content in local context');
        $form['local_context'] = array(
          '#type' => 'select',
          '#options' => array(1 => t('Local'), 0 => t('Outbound')),
          '#default_value' => $this->get_option('local_context'),
          '#description' => t('If local, all links generated by the Apachesolr View display will direct to a page that shows remote content, while staying on the same site.'),
        );
        break;
    }
  }

  function options_submit(&$form, &$form_state) {
    parent::options_submit($form, $form_state);
    switch ($form_state['section']) {
      case 'local_context':
        $this->set_option($form_state['section'], $form_state['values'][$form_state['section']]);
        break;
    }
  }

  function options_summary(&$categories, &$options) {
    parent::options_summary($categories, $options);
    $options['local_context'] = array(
      'category' => 'panel_pane',
      'title' => t('Results links'),
      'value' => $this->get_option('local_context') ? t('Local context') : t('Outbound'),
    );
  }

  function set_pane_conf($conf = array()) {
    parent::set_pane_conf($conf);
    if (!$this->get_option('is_local_context')) {
      // Not yet set to be local context, and conf is being set
      $allow = $this->get_option('allow');
      if (!empty($allow['local_context']) && !empty($conf['local_context'])) {
        // pass override option from pane conf
        $this->set_option('is_local_context', TRUE);
      }
    }
  }
}
