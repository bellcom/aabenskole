<?php

/**
 * Pull content module main functions and hooks
 * @ file
 */

define('PULL_CONTENT_SERVICES_CLIENT', 'pull_content');
define('PULL_CONTENT_ENDPOINT_PATH', 'shared-content');
define('PULL_CONTENT_WATCHDOG', 'PULL CONTENT');
define('PULL_CONTENT_FILE_UPLOAD_DIR', 'pull_content/files');
/**
 * Implements hook_permission().
 * @return type
 */
function pull_content_permission() {
  return array(
    'pull content from other site' => array(
      'title' => t('Pull content from other site'),
  ),
  );
}

/**
 * Implements hook_menu()
 */
function pull_content_menu() {

  $items['pull-content/%solr_multisite/%/%'] = array(
    'page callback' => 'drupal_get_form',
    'access arguments' => array('pull content from other site'),
    'page arguments' => array('pull_content_import_form', 1, 2, 3),
    'type' => MENU_CALLBACK
  );


  return $items;
}


/**
 * Page callback for pull content.
 * @param type $site
 * @param type $entity_type
 * @param type $entity_id
 */
function pull_content_import_form($form, $form_state, $site, $entity_type, $entity_id) {
  if (!in_array($entity_type, variable_get('pull_content_allowed_entity_types', array('node')))) {
    drupal_set_message(t('You are not allowed to import entities from type !typr', array('!type' => $entity_type)), 'error');
    drupal_goto();
  }
  $form['site'] = array('#type' => 'value', '#value' => $site);
  $form['entity_type'] = array('#type' => 'value', '#value' => $entity_type);
  $form['entity_id'] = array('#type' => 'value', '#value' => $entity_id);

  $msg = t('Are you sure that you want to import the content?');
  return confirm_form($form, $msg, '', NULL, t('Import'), t('Cancel'));
}


function pull_content_import_form_submit($form, &$form_state) {
  $values = $form_state['values'];
  try{
    try {
      try{
        $client = _pull_content_connection_get($values['site']);
        $node = $client->getNodeById($values['entity_id']);
        $node = _pull_content_node_create($node, $client);
      }
      catch (ServicesClientConnectionResponseException $e) {
        $e->log();
        if ($e->getErrorCode() == '404') {
          drupal_set_message(t("The requested content could not be found."), 'error');
        }
        else {
          drupal_set_message(t("System error."), 'error');
        }
        return;
      }
    }
    catch (ServicesClientConnectionException $e) {
      $e->log();
      drupal_set_message(t("System error."), 'error');
      return;
    }
  }
  catch (Exception $e) {
    if ($e->getCode() == '404') {
      watchdog(PULL_CONTENT_WATCHDOG, 'Possible 301/302 redirect detected.', array(), WATCHDOG_ERROR);
    }
    drupal_set_message(t("System error."), 'error');
    return;
  }
  
  if (is_object($node) && !empty($node->nid)) {
    drupal_set_message(t("Content is imported successfully."));
    unset($_GET['destination']);
    drupal_goto("node/{$node->nid}/edit");
  }
}

function _pull_content_node_create($node, PullContentServicesClientConnection $client, $follow_content_references = TRUE, $status = NODE_NOT_PUBLISHED, $keep_uuid = FALSE, $nid = NULL, $tnid = NULL) {
  global $user;
  // Assign username to the node from $user created at auth step.
  if (isset($node['name']) && !isset($node['uid'])) {
    $account = user_load_by_name($node['name']);
    if (!empty($account)) {
      $node['uid'] = $account->uid;
    }
    else {
      unset($node['name']);
    }
  }
  // Prepare node object, ensure that we're not going to update some node.
  $node_destination = NULL;
  if ($nid) {
    $node_destination = node_load($nid);
  }
  $node = (object) $node;
  $node_original = clone $node;
  if ($node_destination) {
    $node = clone $node_destination;
    $node->title = $node_original->title;
    $node->status = $node_original->status;
    $node->tnid = $tnid;
  }
  else {
    $node->nid = NULL;
    $node->vid = NULL;
    if (!$keep_uuid) {
      $node->vuuid = NULL;
      $node->uuid = NULL;
    }
    $node->status = $status;
    $node->is_new = TRUE;
    $node->tnid = $tnid;
    // Anyonmymous users don't have a name.
    // @see: drupal_anonymous_user().
    $node->name = isset($user->name) ? $user->name : NULL;
    $node->uid = $user->uid;
    $node->created = NULL;
    $node->menu = NULL;
    $node->panelizer = array();
    if (isset($node->book['mlid'])) {
      $node->book['mlid'] = NULL;
      $node->book['has_children'] = 0;
    }
    $node->path = NULL;
    $node->files = array();
    
    if (module_exists('workbench_moderation')) {
      unset($node->workbench_moderation);
      if ($node->status == NODE_PUBLISHED) {
        $node->workbench_moderation_state_current = workbench_moderation_state_published();
        $node->workbench_moderation_state_new = workbench_moderation_state_published();
      }
      else {
        $node->workbench_moderation_state_current = variable_get('workbench_moderation_default_state_' . $node->type, workbench_moderation_state_none());
        $node->workbench_moderation_state_new = variable_get('workbench_moderation_default_state_' . $node->type, workbench_moderation_state_none());
      }
      
    }
  }
  
  // Control if the node/references fieds should be followed
  $node->_pull_content_follow_content_references = $follow_content_references;

  node_object_prepare($node);
  // overwrite the language because @see i18n_node_node_prepare()
  $node->language = $node_original->language;
  node_submit($node);

  pull_content_node_object_prepare_fields($node, $node_original, $client);
  
  if (isset($node->title_field)) {
    foreach ($node->title_field as $lang_code => $data) {
      $node->title_field[$lang_code] = array();
    }
  }

  node_save($node);
  return $node;
}

function pull_content_node_object_prepare_fields($node, $node_original, PullContentServicesClientConnection $client) {
  $fields_info = $node_original->_pull_content_metadata['field_info_fields'];

  foreach ($fields_info as $field_name => $field_info) {
    if (empty($node_original->{$field_info['field_name']})) {
      continue;
    }
    $modules = module_implements('pull_content_prepare_field_'. $field_info['type']);
    if (empty($modules)) {
      $node->{$field_info['field_name']} = $node_original->{$field_info['field_name']};
    }
    else {
      foreach ($modules as $module) {
        module_invoke($module, 'pull_content_prepare_field_'. $field_info['type'], $node, $node_original, $field_info, $client);
      }
    }
  }

  drupal_alter('pull_content_node_object_prepare_fields', $node, $context);
}

/**
 *
 * Implements hook_pull_content_prepare_field_FIELD_TYPE
 *
 */
function pull_content_pull_content_prepare_field_file($node, $node_original, $field_info, PullContentServicesClientConnection $client) {
  $files = $node_original->{$field_info['field_name']}[LANGUAGE_NONE];
  foreach ($files as $key => $file) {
    $file_remote = $client->getFileById($file['fid']);
    // If the file data or filename is empty then bail.
    if (!isset($file_remote['file']) || empty($file_remote['filename'])) {
      // Remove broken file and log a warning
      watchdog(PULL_CONTENT_WATCHDOG, 'Missing data the file can not be created.', array(), WATCHDOG_WARNING);
      unset($files[$key]);
      continue;
    }

    // Get the directory name for the location of the file:
    if (empty($file_remote['filepath'])) {
      $file_remote['filepath'] = file_default_scheme() . '://' . PULL_CONTENT_FILE_UPLOAD_DIR . '/' . $file_remote['filename'];
    }
    $dir = drupal_dirname($file_remote['filepath']);
    // Build the destination folder tree if it doesn't already exists.
    if (!file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
      watchdog(PULL_CONTENT_WATCHDOG, 'Could not create destination directory for file = !dir.', array('!dir' => $dir), WATCHDOG_ERROR);
      unset($files[$key]);
      continue;
    }

    // Rename potentially executable files, to help prevent exploits.
    if (preg_match('/\.(php|pl|py|cgi|asp|js)$/i', $file_remote['filename']) && (drupal_substr($file_remote['filename'], -4) != '.txt')) {
      $file_remote['filepath'] .= '.txt';
      $file_remote['filename'] .= '.txt';
    }

    $is_remote_file = FALSE;
    foreach (media_get_remote_stream_wrappers() as $remote_wrapper_name => $remote_wrapper) {
      if (mb_strstr($file_remote['uri'], $remote_wrapper_name . '://') !== FALSE) {
        $is_remote_file = TRUE;
      }
    }
    $file_saved = NULL;
    //check if the file is imported already
    $fid = reset(entity_get_id_by_uuid('file', array($file_remote['uuid'])));
    if(empty($fid)) {
      // chech if the file is remote and if already exists
      if ($is_remote_file && !$file_saved = _pull_content_get_file_by_uri($file_remote['uri'])) {
        $file_saved = (object)$file;
        $file_saved->fid = NULL;
        $file_saved->uid = $GLOBALS['user']->uid;
        $file_saved->status = FILE_STATUS_PERMANENT;
      }
      elseif (!$file_saved) {
        if (!$file_saved = file_save_data(base64_decode($file_remote['file']), $file_remote['filepath'])) {
          watchdog(PULL_CONTENT_WATCHDOG, 'Could not write file to destination.', array(), WATCHDOG_ERROR);
          unset($files[$key]);
          continue;
        }
      }
      $file_saved->uuid = $file_remote['uuid'];
      $file_saved = (object)((array)$file_saved + $file_remote);
    }
    else {
      $file_saved = file_load($fid);
    }
    
    pull_content_node_object_prepare_fields($file_saved, (object)$file_remote, $client);
    file_save($file_saved);
    if (!file_save($file_saved)) {
      watchdog(PULL_CONTENT_WATCHDOG, 'Could not save file.', array(), WATCHDOG_ERROR);
      unset($files[$key]);
      continue;
    }

    $files[$key] = (array)$file_saved + $file;
  }
  $node->{$field_info['field_name']}[LANGUAGE_NONE] = $files;
}

function pull_content_pull_content_prepare_field_field_collection($node, $node_original, $field_info, PullContentServicesClientConnection $client) {
  $node->{$field_info['field_name']} = NULL;
  if (empty($node_original->{$field_info['field_name']})) {
    return;
  }
  //getCollectionById
  $collections = $node_original->{$field_info['field_name']}[LANGUAGE_NONE];
  $field_values = array();
  foreach ($collections as $key => $collection_field) {
    $collection_remote = $client->getCollectionById($collection_field['value']);
    $collection_remote = (object)$collection_remote;
    $collection = clone $collection_remote;
    
    //remove any external ids
    unset($collection->item_id, $collection->revision_id, $collection->uuid);
    
    pull_content_node_object_prepare_fields($collection, $collection_remote, $client);
    
    $collection_new = entity_create('field_collection_item', (array)$collection);
    $collection_new->language = $node->language;
    $collection_new->setHostEntity('node', $node, $node->language, FALSE);
    $collection_new->save(TRUE);
    list($collection_id, , ) = entity_extract_ids('field_collection_item', $collection_new);
    $field_values[$key]['value'] = $collection_id;
  }
  if ($field_values) {
    $node->{$field_info['field_name']}[LANGUAGE_NONE] = $field_values;
  }
}

/**
 *
 * Implements hook_pull_content_prepare_field_FIELD_TYPE
 *
 */
function pull_content_pull_content_prepare_field_image($node, $node_original, $field_info, PullContentServicesClientConnection $client) {
  pull_content_pull_content_prepare_field_file($node, $node_original, $field_info, $client);
}

/**
 *
 * Implements hook_pull_content_prepare_field_FIELD_TYPE
 *
 */
function pull_content_pull_content_prepare_field_nodequeue_reference($node, $node_original, $field_info, PullContentServicesClientConnection $client) {
  $node->{$field_info['field_name']}[LANGUAGE_NONE] = NULL;
}

/**
 *
 * Implements hook_pull_content_prepare_field_FIELD_TYPE
 *
 */
function pull_content_pull_content_prepare_field_entityreference($node, $node_original, $field_info, PullContentServicesClientConnection $client) {
  if (empty($node->_pull_content_follow_content_references)) {
    $node->{$field_info['field_name']} = NULL;
    return;
  }
  $entities = $node_original->{$field_info['field_name']}[LANGUAGE_NONE];
  foreach ($entities as $key => $entity) {
    $entity_remote = $client->getNodeById($entity['target_id']);
    
    $nid = reset(entity_get_id_by_uuid('node', array($entity_remote['uuid'])));
    // Tring to find the translation source. Rely that translation source node is already imported.
    $tnid = NULL;
    if ($entity_remote['tnid']) {
      if ($entity_remote['tnid'] != $entity_remote['nid']) {
        $tnode = $client->getNodeById($entity_remote['tnid']);
        $tnid = reset(entity_get_id_by_uuid('node', array($tnode['uuid'])));
      }
      else {
        $tnid = (int)$nid;
      }
      if (empty($tnid)) {
        $tnid = NULL;
      }
    }
    $entity_local = _pull_content_node_create($entity_remote, $client, FALSE, NODE_PUBLISHED, TRUE, $nid, $tnid);

    if (empty($entity_local)) {
      unset($entities[$key]);
      continue;
    }
    $entities[$key]['target_id'] = $entity_local->nid;
  }
  $node->{$field_info['field_name']}[LANGUAGE_NONE] = $entities;
}

/**
 *
 * Implements hook_pull_content_prepare_field_FIELD_TYPE
 *
 */
function pull_content_pull_content_prepare_field_taxonomy_term_reference($node, $node_original, $field_info, PullContentServicesClientConnection $client) {
  $terms = $node_original->{$field_info['field_name']}[LANGUAGE_NONE];
  foreach ($terms as $key => $term) {
    $term_remote = $client->getTermById($term['tid']);
    $term_local = reset(taxonomy_get_term_by_name($term_remote['name'], $term_remote['vocabulary_machine_name']));
    if (empty($term_local)) {
      unset($terms[$key]);
      continue;
    }

    $terms[$key]['tid'] = $term_local->tid;
  }
  $node->{$field_info['field_name']}[LANGUAGE_NONE] = $terms;
}

/**
 *
 * Implements hook_pull_content_prepare_field_FIELD_TYPE
 *
 */
function pull_content_pull_content_prepare_field_link_field($node, $node_original, $field_info, PullContentServicesClientConnection $client) {
  $links = $node_original->{$field_info['field_name']}[LANGUAGE_NONE];
  foreach ($links as $key => $link) {
    $link_local = $link;
    if (!empty($link['url'])) {
      $type = link_validate_url(rawurldecode($link['url']));
      if ($type === LINK_INTERNAL) {
        $link_local['url'] = $client->getConnectionDomain() . '/' . $link['url'];
      }
      
    }

    $links[$key] = $link_local;
  }
  $node->{$field_info['field_name']}[LANGUAGE_NONE] = $links;
}

/**
 *
 * Implements hook_pull_content_prepare_field_FIELD_TYPE
 *
 */
function pull_content_pull_content_prepare_field_text_with_summary($node, $node_original, $field_info, PullContentServicesClientConnection $client) {
  $text_items = $node_original->{$field_info['field_name']}[LANGUAGE_NONE];
  foreach ($text_items as $key => $item) {
    $item_local = $item;
    $domain = &drupal_static('pull_content_pull_content_prepare_field_text', '');
    if (empty($domain)) {
      $domain = $client->getConnectionDomain();
    }
      
    $item_local['value'] = preg_replace_callback('~(href|src|action|longdesc)="([^"]+)~i', '_pull_content_path_replace', $item_local['value']);
    $text_items[$key] = $item_local;
  }
  $node->{$field_info['field_name']}[LANGUAGE_NONE] = $text_items;
}

/**
 *
 * Implements hook_pull_content_prepare_field_FIELD_TYPE
 *
 */
function pull_content_pull_content_prepare_field_text_long($node, $node_original, $field_info, PullContentServicesClientConnection $client) {
  pull_content_pull_content_prepare_field_text_with_summary($node, $node_original, $field_info, $client);
}

function _pull_content_path_replace($matches) {
  $type = link_validate_url(rawurldecode($matches[2]));
  if ($type === LINK_INTERNAL) {
    $domain = drupal_static('pull_content_pull_content_prepare_field_text', '');
    $matches[2] = ltrim($matches[2], '/');
    $url = $domain . '/'. $matches[2];
    return "{$matches[1]}=\"{$url}";
  }
  else {
    return $matches[0];
  }
}

/**
 *
 * Implements hook_pull_content_prepare_field_FIELD_TYPE
 *
 */
function pull_content_pull_content_prepare_field_field_working_hours($node, $node_original, $field_info, PullContentServicesClientConnection $client) {
  $working_hours = $node_original->{$field_info['field_name']}[LANGUAGE_NONE];
  foreach ($working_hours as $key => $item) {
    $term_remote = $client->getTermById($item['type_tid']);
    $term_local = reset(taxonomy_get_term_by_name($term_remote['name'], $term_remote['vocabulary_machine_name']));
    if (empty($term_local)) {
      unset($working_hours[$key]);
      continue;
    }

    $working_hours[$key]['type_tid'] = $term_local->tid;
  }
  $node->{$field_info['field_name']}[LANGUAGE_NONE] = $working_hours;
}

function _pull_content_get_file_by_uri($uri) {

  $files = entity_load('file', FALSE, array('uri' => $uri));
  return !empty($files) ? reset($files) : FALSE;
}

function pull_content_entity_load($entities, $type) {
  foreach ($entities as $entity) {
    list($id, $vid, $bundle) = entity_extract_ids($type, $entity);
    if(empty($id) || empty($bundle)) {
      return;
    }
    $entities[$id]->_pull_content_metadata['field_info_fields'] =  array_intersect_key(field_info_fields(), field_info_instances($type, $bundle));
  }
}

/**
 *
 * Create ws connection
 * @param string $name - $nid
 * @param array $remote_site - remote site info
 * @throws Exception
 *
 * @return PullContentServicesClientConnection
 */
function _pull_content_connection_get($remote_site) {
  $clients = &drupal_static(__FUNCTION__, array());

  if (!isset($clients[$remote_site['site']])) {
    $connection = services_client_connection_load(PULL_CONTENT_SERVICES_CLIENT);
    $connection->endpoint = rtrim($remote_site['site'], '/') .'/' . PULL_CONTENT_ENDPOINT_PATH;

    if (!$connection) {
      throw new Exception(t('Specified connection is not existing.'));
    }
    $clients[$remote_site['site']] = new PullContentServicesClientConnection($connection);

  }
  return $clients[$remote_site['site']];
}


function solr_multisite_load($site_hash) {
  $sites = _pull_content_get_multisites();
  if (isset($sites[$site_hash]) && is_array($sites[$site_hash])) {
    $url = parse_url($sites[$site_hash]['site']);
    $sites[$site_hash]['site'] = $url['scheme'] . '://' . $url['host'];
    return $sites[$site_hash];
  }
}

/**
 * Helper function - get sites from metadata
 */
function _pull_content_get_multisites() {
  return variable_get('apachesolr_multisitesearch_metadata', array());
}
